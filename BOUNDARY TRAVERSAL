#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
bool isLeaf(TreeNode<int>* root) {
  return !root -> left && !root -> right;
}


void addLeft(TreeNode<int>* root, vector<int> &res){
    TreeNode<int>* node= root->left;
    while(node){
    if(!isLeaf(node) ) res.push_back(node->data);

    if(node->left) node=node->left;
    else node=node->right;
    }
}

void addRight(TreeNode<int>* root, vector<int> &res){
    TreeNode<int>* node= root->right;
    vector<int> temp;
    while(node){
    if(!isLeaf(node)) temp.push_back(node->data);

    if(node->right) node=node->right;
    else node=node->left;
    }
    for(int i=temp.size()-1; i>=0; i--){
        res.push_back(temp[i]);
    }
}

void addLeaves(TreeNode<int>* root, vector<int> &res){
    TreeNode<int>* node= root;
    if(isLeaf(node)){
         res.push_back(node->data);
         return;
        }
    if(node->left) addLeaves(node->left, res);

    if(node->right) addLeaves(node->right, res);

}
vector<int> traverseBoundary(TreeNode<int>* root){
    // Write your code here.
    vector<int> res;
    if(!root) return res;
    if(!isLeaf(root))
    res.push_back(root->data);
    addLeft(root, res);

    addLeaves(root, res);

    addRight(root, res);

    return res;
}




